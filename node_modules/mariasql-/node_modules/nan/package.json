{
  "name": "nan",
  "version": "1.6.2",
  "description": "Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility",
  "main": "include_dirs.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/rvagg/nan.git"
  },
  "scripts": {
    "test": "tap --gc test/js/*-test.js",
    "rebuild-tests": "pangyp rebuild --directory test"
  },
  "contributors": [
    {
      "name": "Rod Vagg",
      "email": "r@va.gg",
      "url": "https://github.com/rvagg"
    },
    {
      "name": "Benjamin Byholm",
      "email": "bbyholm@abo.fi",
      "url": "https://github.com/kkoopa/"
    },
    {
      "name": "Trevor Norris",
      "email": "trev.norris@gmail.com",
      "url": "https://github.com/trevnorris"
    },
    {
      "name": "Nathan Rajlich",
      "email": "nathan@tootallnate.net",
      "url": "https://github.com/TooTallNate"
    },
    {
      "name": "Brett Lawson",
      "email": "brett19@gmail.com",
      "url": "https://github.com/brett19"
    },
    {
      "name": "Ben Noordhuis",
      "email": "info@bnoordhuis.nl",
      "url": "https://github.com/bnoordhuis"
    },
    {
      "name": "David Siegel",
      "email": "david@artcom.de",
      "url": "https://github.com/agnat"
    }
  ],
  "devDependencies": {
    "bindings": "~1.2.1",
    "node-gyp": "~1.0.2",
    "pangyp": "~2.0.1",
    "tap": "~0.5.0",
    "xtend": "~4.0.0"
  },
  "license": "MIT",
  "readme": "Native Abstractions for Node.js\r\n===============================\r\n\r\n**A header file filled with macro and utility goodness for making add-on development for Node.js easier across versions 0.8, 0.10 and 0.11, and eventually 0.12.**\r\n\r\n***Current version: 1.6.2***\r\n\r\n*(See [CHANGELOG.md](https://github.com/rvagg/nan/blob/master/CHANGELOG.md) for complete ChangeLog)*\r\n\r\n[![NPM](https://nodei.co/npm/nan.png?downloads=true&downloadRank=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6&height=3)](https://nodei.co/npm/nan/)\r\n\r\n[![Build Status](https://secure.travis-ci.org/rvagg/nan.png)](http://travis-ci.org/rvagg/nan)\r\n[![Build status](https://ci.appveyor.com/api/projects/status/kh73pbm9dsju7fgh)](https://ci.appveyor.com/project/RodVagg/nan)\r\n\r\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.11/0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\r\n\r\nThis project also contains some helper utilities that make addon development a bit more pleasant.\r\n\r\n * **[News & Updates](#news)**\r\n * **[Usage](#usage)**\r\n * **[Example](#example)**\r\n * **[API](#api)**\r\n * **[Tests](#tests)**\r\n\r\n<a name=\"news\"></a>\r\n## News & Updates\r\n\r\n### Jan-2015: 1.6.0 release\r\n\r\n* Deprecated `NanNewContextHandle` in favor of `NanNew<Context>`\r\n* Added `NanSetCounterFunction`, `NanSetCreateHistogramFunction`, `NanSetAddHistogramSampleFunction`\r\n* Added `NanIdleNotification`, `NanLowMemoryNotification`, `NanContextDisposedNotification`\r\n* Added `NanEncode`, `NanDecodeBytes` and `NanDecodeWrite`\r\n\r\n### Jan-2015: 1.5.0 release\r\n\r\n* Support [io.js](https://github.com/iojs/io.js) thanks to [Ben Noordhuis](bnoordhuis)\r\n* Rewritten NanNew internals thanks to [David Siegel](agnat)\r\n* NanAsyncWorker now supports progress reporting thanks to [Brett Lawson](brett19)\r\n\r\n### Aug-2014: 1.3.0 release\r\n\r\n* `NanCString()` and `NanRawString()` have been deprecated in favour of new <a href=\"#api_nan_ascii_string\"><b><code>NanAsciiString</code></b></a>, <a href=\"#api_nan_utf8_string\"><b><code>NanUtf8String</code></b></a> and <a href=\"#api_nan_ucs2_string\"><b><code>NanUcs2String</code></b></a>. These classes manage the underlying memory for you in a safer way than just handing off an allocated array. You should now `*NanAsciiString(handle)` to access the raw `char` data, you can also allocate on the heap if you need to keep a reference.\r\n* Two more <a href=\"#api_nan_make_callback\"><b><code>NanMakeCallback</code></b></a> overloads have been added to for parity with Node core.\r\n* You can now `NanNew(std::string)` (use `NanNew<std::string&>(std::string&)` to pass by reference)\r\n* <a href=\"#api_nan_set_template\"><b><code>NanSetTemplate</code></b></a>, <a href=\"#api_nan_set_prototype_template\"><b><code>NanSetPrototypeTemplate</code></b></a> and <a href=\"#api_nan_set_instance_template\"><b><code>NanSetInstanceTemplate</code></b></a> have been added.\r\n\r\n### May-2014: 1.1.0 release\r\n\r\n* We've deprecated `NanSymbol()`, you should just use `NanNew<String>()` now.\r\n* `NanNull()`, `NanUndefined()`, `NanTrue()`, `NanFalse()` all return `Local`s now.\r\n* `nan_isolate` is gone, it was intended to be internal-only but if you were using it then you should switch to `v8::Isolate::GetCurrent()`.\r\n* `NanNew()` has received some additional overload-love so you should be able to give it many kinds of values without specifying the `<Type>`.\r\n* Lots of small fixes and additions to expand the V8 API coverage, *use the source, Luke*.\r\n\r\n\r\n### May-2014: Major changes for V8 3.25 / Node 0.11.13\r\n\r\nNode 0.11.11 and 0.11.12 were both broken releases for native add-ons, you simply can't properly compile against either of them for different reasons. But we now have a 0.11.13 release that jumps a couple of versions of V8 ahead and includes some more, major (traumatic) API changes.\r\n\r\nBecause we are now nearing Node 0.12 and estimate that the version of V8 we are using in Node 0.11.13 will be close to the API we get for 0.12, we have taken the opportunity to not only *fix* NAN for 0.11.13 but make some major changes to improve the NAN API.\r\n\r\nWe have **removed support for Node 0.11 versions prior to 0.11.13**. As usual, our tests are run against (and pass) the last 5 versions of Node 0.8 and Node 0.10. We also include Node 0.11.13 obviously.\r\n\r\nThe major change is something that [Benjamin Byholm](kkoopa) has put many hours in to. We now have a fantastic new `NanNew<T>(args)` interface for creating new `Local`s, this replaces `NanNewLocal()` and much more. If you look in [./nan.h](nan.h) you'll see a large number of overloaded versions of this method. In general you should be able to `NanNew<Type>(arguments)` for any type you want to make a `Local` from. This includes `Persistent` types, so we now have a `Local<T> NanNew(const Persistent<T> arg)` to replace `NanPersistentToLocal()`.\r\n\r\nWe also now have `NanUndefined()`, `NanNull()`, `NanTrue()` and `NanFalse()`. Mainly because of the new requirement for an `Isolate` argument for each of the native V8 versions of this.\r\n\r\nV8 has now introduced an `EscapableHandleScope` from which you `scope.Escape(Local<T> value)` to *return* a value from a one scope to another. This replaces the standard `HandleScope` and `scope.Close(Local<T> value)`, although `HandleScope` still exists for when you don't need to return a handle to the caller. For NAN we are exposing it as `NanEscapableScope()` and `NanEscapeScope()`, while `NanScope()` is still how you create a new scope that doesn't need to return handles. For older versions of Node/V8, it'll still map to the older `HandleScope` functionality.\r\n\r\n`NanFromV8String()` was deprecated and has now been removed. You should use `NanCString()` or `NanRawString()` instead.\r\n\r\nBecause `node::MakeCallback()` now takes an `Isolate`, and because it doesn't exist in older versions of Node, we've introduced `NanMakeCallback()`. You should *always* use this when calling a JavaScript function from C++.\r\n\r\nThere's lots more, check out the Changelog in nan.h or look through [#86](https://github.com/rvagg/nan/pull/86) for all the gory details.\r\n\r\n### Dec-2013: NanCString and NanRawString\r\n\r\nTwo new functions have been introduced to replace the functionality that's been provided by `NanFromV8String` until now. NanCString has sensible defaults so it's super easy to fetch a null-terminated c-style string out of a `v8::String`. `NanFromV8String` is still around and has defaults that allow you to pass a single handle to fetch a `char*` while `NanRawString` requires a little more attention to arguments.\r\n\r\n### Nov-2013: Node 0.11.9+ breaking V8 change\r\n\r\nThe version of V8 that's shipping with Node 0.11.9+ has changed the signature for new `Local`s to: `v8::Local<T>::New(isolate, value)`, i.e. introducing the `isolate` argument and therefore breaking all new `Local` declarations for previous versions. NAN 0.6+ now includes a `NanNewLocal<T>(value)` that can be used in place to work around this incompatibility and maintain compatibility with 0.8->0.11.9+ (minus a few early 0.11 releases).\r\n\r\nFor example, if you wanted to return a `null` on a callback you will have to change the argument from `v8::Local<v8::Value>::New(v8::Null())` to `NanNewLocal<v8::Value>(v8::Null())`.\r\n\r\n### Nov-2013: Change to binding.gyp `\"include_dirs\"` for NAN\r\n\r\nInclusion of NAN in a project's binding.gyp is now greatly simplified. You can now just use `\"<!(node -e \\\"require('nan')\\\")\"` in your `\"include_dirs\"`, see example below (note Windows needs the quoting around `require` to be just right: `\"require('nan')\"` with appropriate `\\` escaping).\r\n\r\n<a name=\"usage\"></a>\r\n## Usage\r\n\r\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\r\n\r\n``` bash\r\n$ npm install --save nan\r\n```\r\n\r\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include <nan.h>` in your *.cpp* files:\r\n\r\n``` python\r\n\"include_dirs\" : [\r\n    \"<!(node -e \\\"require('nan')\\\")\"\r\n]\r\n```\r\n\r\nThis works like a `-I<path-to-NAN>` when compiling your addon.\r\n\r\n<a name=\"example\"></a>\r\n## Example\r\n\r\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\r\n\r\nFor a simpler example, see the **[async pi estimation example](https://github.com/rvagg/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\r\n\r\nFor another example, see **[nan-example-eol](https://github.com/CodeCharmLtd/nan-example-eol)**. It shows newline detection implemented as a native addon.\r\n\r\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/rvagg/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\r\n\r\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\r\n\r\n```c++\r\n// addon.cc\r\n#include <node.h>\r\n#include <nan.h>\r\n// ...\r\n\r\nusing v8::FunctionTemplate;\r\nusing v8::Handle;\r\nusing v8::Object;\r\nusing v8::String;\r\n\r\nvoid InitAll(Handle<Object> exports) {\r\n  exports->Set(NanNew<String>(\"calculateSync\"),\r\n    NanNew<FunctionTemplate>(CalculateSync)->GetFunction());\r\n\r\n  exports->Set(NanNew<String>(\"calculateAsync\"),\r\n    NanNew<FunctionTemplate>(CalculateAsync)->GetFunction());\r\n}\r\n\r\nNODE_MODULE(addon, InitAll)\r\n```\r\n\r\n```c++\r\n// sync.h\r\n#include <node.h>\r\n#include <nan.h>\r\n\r\nNAN_METHOD(CalculateSync);\r\n```\r\n\r\n```c++\r\n// sync.cc\r\n#include <node.h>\r\n#include <nan.h>\r\n#include \"./sync.h\"\r\n// ...\r\n\r\nusing v8::Number;\r\n\r\n// Simple synchronous access to the `Estimate()` function\r\nNAN_METHOD(CalculateSync) {\r\n  NanScope();\r\n\r\n  // expect a number as the first argument\r\n  int points = args[0]->Uint32Value();\r\n  double est = Estimate(points);\r\n\r\n  NanReturnValue(NanNew<Number>(est));\r\n}\r\n```\r\n\r\n```c++\r\n// async.h\r\n#include <node.h>\r\n#include <nan.h>\r\n\r\nNAN_METHOD(CalculateAsync);\r\n```\r\n\r\n```c++\r\n// async.cc\r\n#include <node.h>\r\n#include <nan.h>\r\n#include \"./async.h\"\r\n\r\n// ...\r\n\r\nusing v8::Function;\r\nusing v8::Local;\r\nusing v8::Null;\r\nusing v8::Number;\r\nusing v8::Value;\r\n\r\nclass PiWorker : public NanAsyncWorker {\r\n public:\r\n  PiWorker(NanCallback *callback, int points)\r\n    : NanAsyncWorker(callback), points(points) {}\r\n  ~PiWorker() {}\r\n\r\n  // Executed inside the worker-thread.\r\n  // It is not safe to access V8, or V8 data structures\r\n  // here, so everything we need for input and output\r\n  // should go on `this`.\r\n  void Execute () {\r\n    estimate = Estimate(points);\r\n  }\r\n\r\n  // Executed when the async work is complete\r\n  // this function will be run inside the main event loop\r\n  // so it is safe to use V8 again\r\n  void HandleOKCallback () {\r\n    NanScope();\r\n\r\n    Local<Value> argv[] = {\r\n        NanNull()\r\n      , NanNew<Number>(estimate)\r\n    };\r\n\r\n    callback->Call(2, argv);\r\n  };\r\n\r\n private:\r\n  int points;\r\n  double estimate;\r\n};\r\n\r\n// Asynchronous access to the `Estimate()` function\r\nNAN_METHOD(CalculateAsync) {\r\n  NanScope();\r\n\r\n  int points = args[0]->Uint32Value();\r\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\r\n\r\n  NanAsyncQueueWorker(new PiWorker(callback, points));\r\n  NanReturnUndefined();\r\n}\r\n```\r\n\r\n<a name=\"api\"></a>\r\n## API\r\n\r\n * <a href=\"#api_nan_method\"><b><code>NAN_METHOD</code></b></a>\r\n * <a href=\"#api_nan_getter\"><b><code>NAN_GETTER</code></b></a>\r\n * <a href=\"#api_nan_setter\"><b><code>NAN_SETTER</code></b></a>\r\n * <a href=\"#api_nan_property_getter\"><b><code>NAN_PROPERTY_GETTER</code></b></a>\r\n * <a href=\"#api_nan_property_setter\"><b><code>NAN_PROPERTY_SETTER</code></b></a>\r\n * <a href=\"#api_nan_property_enumerator\"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\r\n * <a href=\"#api_nan_property_deleter\"><b><code>NAN_PROPERTY_DELETER</code></b></a>\r\n * <a href=\"#api_nan_property_query\"><b><code>NAN_PROPERTY_QUERY</code></b></a>\r\n * <a href=\"#api_nan_index_getter\"><b><code>NAN_INDEX_GETTER</code></b></a>\r\n * <a href=\"#api_nan_index_setter\"><b><code>NAN_INDEX_SETTER</code></b></a>\r\n * <a href=\"#api_nan_index_enumerator\"><b><code>NAN_INDEX_ENUMERATOR</code></b></a>\r\n * <a href=\"#api_nan_index_deleter\"><b><code>NAN_INDEX_DELETER</code></b></a>\r\n * <a href=\"#api_nan_index_query\"><b><code>NAN_INDEX_QUERY</code></b></a>\r\n * <a href=\"#api_nan_gc_callback\"><b><code>NAN_GC_CALLBACK</code></b></a>\r\n * <a href=\"#api_nan_weak_callback\"><b><code>NAN_WEAK_CALLBACK</code></b></a>\r\n * <a href=\"#api_nan_deprecated\"><b><code>NAN_DEPRECATED</code></b></a>\r\n * <a href=\"#api_nan_inline\"><b><code>NAN_INLINE</code></b></a>\r\n * <a href=\"#api_nan_new\"><b><code>NanNew</code></b></a>\r\n * <a href=\"#api_nan_undefined\"><b><code>NanUndefined</code></b></a>\r\n * <a href=\"#api_nan_null\"><b><code>NanNull</code></b></a>\r\n * <a href=\"#api_nan_true\"><b><code>NanTrue</code></b></a>\r\n * <a href=\"#api_nan_false\"><b><code>NanFalse</code></b></a>\r\n * <a href=\"#api_nan_return_value\"><b><code>NanReturnValue</code></b></a>\r\n * <a href=\"#api_nan_return_undefined\"><b><code>NanReturnUndefined</code></b></a>\r\n * <a href=\"#api_nan_return_null\"><b><code>NanReturnNull</code></b></a>\r\n * <a href=\"#api_nan_return_empty_string\"><b><code>NanReturnEmptyString</code></b></a>\r\n * <a href=\"#api_nan_return_this\"><b><code>NanReturnThis</code></b></a>\r\n * <a href=\"#api_nan_return_holder\"><b><code>NanReturnHolder</code></b></a>\r\n * <a href=\"#api_nan_scope\"><b><code>NanScope</code></b></a>\r\n * <a href=\"#api_nan_escapable_scope\"><b><code>NanEscapableScope</code></b></a>\r\n * <a href=\"#api_nan_escape_scope\"><b><code>NanEscapeScope</code></b></a>\r\n * <a href=\"#api_nan_locker\"><b><code>NanLocker</code></b></a>\r\n * <a href=\"#api_nan_unlocker\"><b><code>NanUnlocker</code></b></a>\r\n * <a href=\"#api_nan_get_internal_field_pointer\"><b><code>NanGetInternalFieldPointer</code></b></a>\r\n * <a href=\"#api_nan_set_internal_field_pointer\"><b><code>NanSetInternalFieldPointer</code></b></a>\r\n * <a href=\"#api_nan_object_wrap_handle\"><b><code>NanObjectWrapHandle</code></b></a>\r\n * <del><a href=\"#api_nan_symbol\"><b><code>NanSymbol</code></b></a></del>\r\n * <a href=\"#api_nan_get_pointer_safe\"><b><code>NanGetPointerSafe</code></b></a>\r\n * <a href=\"#api_nan_set_pointer_safe\"><b><code>NanSetPointerSafe</code></b></a>\r\n * <del><a href=\"#api_nan_raw_string\"><b><code>NanRawString</code></b></a></del>\r\n * <del><a href=\"#api_nan_c_string\"><b><code>NanCString</code></b></a></del>\r\n * <a href=\"#api_nan_ascii_string\"><b><code>NanAsciiString</code></b></a>\r\n * <a href=\"#api_nan_utf8_string\"><b><code>NanUtf8String</code></b></a>\r\n * <a href=\"#api_nan_ucs2_string\"><b><code>NanUcs2String</code></b></a>\r\n * <a href=\"#api_nan_boolean_option_value\"><b><code>NanBooleanOptionValue</code></b></a>\r\n * <a href=\"#api_nan_uint32_option_value\"><b><code>NanUInt32OptionValue</code></b></a>\r\n * <a href=\"#api_nan_error\"><b><code>NanError</code></b>, <b><code>NanTypeError</code></b>, <b><code>NanRangeError</code></b></a>\r\n * <a href=\"#api_nan_throw_error\"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\r\n * <a href=\"#api_nan_new_buffer_handle\"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\r\n * <a href=\"#api_nan_buffer_use\"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\r\n * <del><a href=\"#api_nan_new_context_handle\"><b><code>NanNewContextHandle</code></b></a></del>\r\n * <a href=\"#api_nan_get_current_context\"><b><code>NanGetCurrentContext</code></b></a>\r\n * <a href=\"#api_nan_has_instance\"><b><code>NanHasInstance</code></b></a>\r\n * <a href=\"#api_nan_dispose_persistent\"><b><code>NanDisposePersistent</code></b></a>\r\n * <a href=\"#api_nan_assign_persistent\"><b><code>NanAssignPersistent</code></b></a>\r\n * <a href=\"#api_nan_make_weak_persistent\"><b><code>NanMakeWeakPersistent</code></b></a>\r\n * <a href=\"#api_nan_set_template\"><b><code>NanSetTemplate</code></b></a>\r\n * <a href=\"#api_nan_set_prototype_template\"><b><code>NanSetPrototypeTemplate</code></b></a>\r\n * <a href=\"#api_nan_set_instance_template\"><b><code>NanSetInstanceTemplate</code></b></a>\r\n * <a href=\"#api_nan_make_callback\"><b><code>NanMakeCallback</code></b></a>\r\n * <a href=\"#api_nan_encode\"><b><code>NanEncode</code></b></a>\r\n * <a href=\"#api_nan_decode_bytes\"><b><code>NanDecodeBytes</code></b></a>\r\n * <a href=\"#api_nan_decode_write\"><b><code>NanDecodeWrite</code></b></a>\r\n * <a href=\"#api_nan_compile_script\"><b><code>NanCompileScript</code></b></a>\r\n * <a href=\"#api_nan_run_script\"><b><code>NanRunScript</code></b></a>\r\n * <a href=\"#api_nan_adjust_external_memory\"><b><code>NanAdjustExternalMemory</code></b></a>\r\n * <a href=\"#api_nan_add_gc_epilogue_callback\"><b><code>NanAddGCEpilogueCallback</code></b></a>\r\n * <a href=\"#api_nan_add_gc_prologue_callback\"><b><code>NanAddGCPrologueCallback</code></b></a>\r\n * <a href=\"#api_nan_remove_gc_epilogue_callback\"><b><code>NanRemoveGCEpilogueCallback</code></b></a>\r\n * <a href=\"#api_nan_remove_gc_prologue_callback\"><b><code>NanRemoveGCPrologueCallback</code></b></a>\r\n * <a href=\"#api_nan_get_heap_statistics\"><b><code>NanGetHeapStatistics</code></b></a>\r\n * <a href=\"#api_nan_set_counter_function\"><b><code>NanSetCounterFunction</code></b></a>\r\n * <a href=\"#api_nan_set_create_histogram_function\"><b><code>NanSetCreateHistogramFunction</code></b></a>\r\n * <a href=\"#api_nan_set_add_histogram_sample_function\"><b><code>NanSetAddHistogramSampleFunction</code></b></a>\r\n * <a href=\"#api_nan_idle_notification\"><b><code>NanIdleNotification</code></b></a>\r\n * <a href=\"#api_nan_low_memory_notification\"><b><code>NanLowMemoryNotification</code></b></a>\r\n * <a href=\"#api_nan_context_disposed_notification\"><b><code>NanContextDisposedNotification</code></b></a>\r\n * <a href=\"#api_nan_callback\"><b><code>NanCallback</code></b></a>\r\n * <a href=\"#api_nan_async_worker\"><b><code>NanAsyncWorker</code></b></a>\r\n * <a href=\"#api_nan_async_queue_worker\"><b><code>NanAsyncQueueWorker</code></b></a>\r\n\r\n<a name=\"api_nan_method\"></a>\r\n### NAN_METHOD(methodname)\r\n\r\nUse `NAN_METHOD` to define your V8 accessible methods:\r\n\r\n```c++\r\n// .h:\r\nclass Foo : public node::ObjectWrap {\r\n  ...\r\n\r\n  static NAN_METHOD(Bar);\r\n  static NAN_METHOD(Baz);\r\n}\r\n\r\n\r\n// .cc:\r\nNAN_METHOD(Foo::Bar) {\r\n  ...\r\n}\r\n\r\nNAN_METHOD(Foo::Baz) {\r\n  ...\r\n}\r\n```\r\n\r\nThe reason for this macro is because of the method signature change in 0.11:\r\n\r\n```c++\r\n// 0.10 and below:\r\nHandle<Value> name(const Arguments& args)\r\n\r\n// 0.11 and above\r\nvoid name(const FunctionCallbackInfo<Value>& args)\r\n```\r\n\r\nThe introduction of `FunctionCallbackInfo` brings additional complications:\r\n\r\n<a name=\"api_nan_getter\"></a>\r\n### NAN_GETTER(methodname)\r\n\r\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\r\n\r\n<a name=\"api_nan_setter\"></a>\r\n### NAN_SETTER(methodname)\r\n\r\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\r\n\r\n<a name=\"api_nan_property_getter\"></a>\r\n### NAN_PROPERTY_GETTER(cbname)\r\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\r\n\r\n<a name=\"api_nan_property_setter\"></a>\r\n### NAN_PROPERTY_SETTER(cbname)\r\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\r\n\r\n<a name=\"api_nan_property_enumerator\"></a>\r\n### NAN_PROPERTY_ENUMERATOR(cbname)\r\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\r\n\r\n<a name=\"api_nan_property_deleter\"></a>\r\n### NAN_PROPERTY_DELETER(cbname)\r\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\r\n\r\n<a name=\"api_nan_property_query\"></a>\r\n### NAN_PROPERTY_QUERY(cbname)\r\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\r\n\r\n<a name=\"api_nan_index_getter\"></a>\r\n### NAN_INDEX_GETTER(cbname)\r\nUse `NAN_INDEX_GETTER` to declare your V8 accessible index getters. You get a `uint32_t` `index` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_GETTER`.\r\n\r\n<a name=\"api_nan_index_setter\"></a>\r\n### NAN_INDEX_SETTER(cbname)\r\nUse `NAN_INDEX_SETTER` to declare your V8 accessible index setters. Same as `NAN_INDEX_GETTER` but you also get a `Local<Value>` `value` object to work with.\r\n\r\n<a name=\"api_nan_index_enumerator\"></a>\r\n### NAN_INDEX_ENUMERATOR(cbname)\r\nUse `NAN_INDEX_ENUMERATOR` to declare your V8 accessible index enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_INDEX_GETTER` call.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_ENUMERATOR`.\r\n\r\n<a name=\"api_nan_index_deleter\"></a>\r\n### NAN_INDEX_DELETER(cbname)\r\nUse `NAN_INDEX_DELETER` to declare your V8 accessible index deleters. Same as `NAN_INDEX_GETTER`.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_DELETER`.\r\n\r\n<a name=\"api_nan_index_query\"></a>\r\n### NAN_INDEX_QUERY(cbname)\r\nUse `NAN_INDEX_QUERY` to declare your V8 accessible index queries. Same as `NAN_INDEX_GETTER`.\r\n\r\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_QUERY`.\r\n\r\n<a name=\"api_nan_gc_callback\"></a>\r\n### NAN_GC_CALLBACK(cbname)\r\nUse `NAN_GC_CALLBACK` to declare your callbacks for `NanAddGCEpilogueCallback` and `NanAddGCPrologueCallback`. You get arguments `GCType type` and `GCCallbackFlags flags`.\r\n\r\n```c++\r\nstatic Persistent<Function> callback;\r\n\r\nNAN_GC_CALLBACK(gcPrologueCallback) {\r\n  Local<Value> argv[] = {NanNew(\"prologue\")};\r\n  NanMakeCallback(NanGetCurrentContext()->Global(), NanNew(callback), 1, argv);\r\n}\r\n\r\nNAN_METHOD(Hook) {\r\n  NanScope();\r\n  NanAssignPersistent(callback, args[0].As<Function>());\r\n  NanAddGCPrologueCallback(gcPrologueCallback);\r\n  NanReturnValue(args.Holder());\r\n}\r\n```\r\n\r\n<a name=\"api_nan_weak_callback\"></a>\r\n### NAN_WEAK_CALLBACK(cbname)\r\n\r\nUse `NAN_WEAK_CALLBACK` to define your V8 WeakReference callbacks. There is an argument object `const _NanWeakCallbackData<T, P> &data` allowing access to the weak object and the supplied parameter through its `GetValue` and `GetParameter` methods. You can even access the weak callback info object through the `GetCallbackInfo()`method, but you probably should not. `Revive()` keeps the weak object alive until the next GC round.\r\n\r\n```c++\r\nNAN_WEAK_CALLBACK(weakCallback) {\r\n  int *parameter = data.GetParameter();\r\n  NanMakeCallback(NanGetCurrentContext()->Global(), data.GetValue(), 0, NULL);\r\n  if ((*parameter)++ == 0) {\r\n    data.Revive();\r\n  } else {\r\n    delete parameter;\r\n  }\r\n}\r\n```\r\n\r\n<a name=\"api_nan_deprecated\"></a>\r\n### NAN_DEPRECATED\r\nDeclares a function as deprecated.\r\n\r\n```c++\r\nstatic NAN_DEPRECATED NAN_METHOD(foo) {\r\n  ...\r\n}\r\n```\r\n\r\n<a name=\"api_nan_inline\"></a>\r\n### NAN_INLINE\r\nInlines a function.\r\n\r\n```c++\r\nNAN_INLINE int foo(int bar) {\r\n  ...\r\n}\r\n```\r\n\r\n<a name=\"api_nan_new\"></a>\r\n### Local&lt;T&gt; NanNew&lt;T&gt;( ... )\r\n\r\nUse `NanNew` to construct almost all v8 objects (bound `Script`s are constructed with <a href=\"#api_nan_compile_script\">`NanCompileScript(Handle)`</a>) and make new local handles.\r\n\r\n```c++\r\nLocal<String> s = NanNew<String>(\"value\");\r\n\r\n...\r\n\r\nPersistent<Object> o;\r\n\r\n...\r\n\r\nLocal<Object> lo = NanNew(o);\r\n\r\n```\r\n\r\n<a name=\"api_nan_undefined\"></a>\r\n### Local&lt;Primitive&gt; NanUndefined()\r\n\r\nUse instead of `Undefined()`\r\n\r\n<a name=\"api_nan_null\"></a>\r\n### Local&lt;Primitive&gt; NanNull()\r\n\r\nUse instead of `Null()`\r\n\r\n<a name=\"api_nan_true\"></a>\r\n### Local&lt;Boolean&gt; NanTrue()\r\n\r\nUse instead of `True()`\r\n\r\n<a name=\"api_nan_false\"></a>\r\n### Local&lt;Boolean&gt; NanFalse()\r\n\r\nUse instead of `False()`\r\n\r\n<a name=\"api_nan_return_value\"></a>\r\n### NanReturnValue(Handle&lt;Value&gt;)\r\n\r\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\r\n\r\n```c++\r\nNAN_METHOD(Foo::Bar) {\r\n  ...\r\n\r\n  NanReturnValue(NanNew<String>(\"FooBar!\"));\r\n}\r\n```\r\n\r\nNo `return` statement required.\r\n\r\n<a name=\"api_nan_return_undefined\"></a>\r\n### NanReturnUndefined()\r\n\r\nUse `NanReturnUndefined` when you don't want to return anything from your V8 accessible method:\r\n\r\n```c++\r\nNAN_METHOD(Foo::Baz) {\r\n  ...\r\n\r\n  NanReturnUndefined();\r\n}\r\n```\r\n\r\n<a name=\"api_nan_return_null\"></a>\r\n### NanReturnNull()\r\n\r\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\r\n\r\n```c++\r\nNAN_METHOD(Foo::Baz) {\r\n  ...\r\n\r\n  NanReturnNull();\r\n}\r\n```\r\n\r\n<a name=\"api_nan_return_empty_string\"></a>\r\n### NanReturnEmptyString()\r\n\r\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\r\n\r\n```c++\r\nNAN_METHOD(Foo::Baz) {\r\n  ...\r\n\r\n  NanReturnEmptyString();\r\n}\r\n```\r\n\r\n<a name=\"api_nan_return_this\"></a>\r\n### NanReturnThis()\r\n\r\nUse `NanReturnThis` when you want to return `This` from your V8 accessible method:\r\n\r\n```c++\r\nNAN_METHOD(Foo::Baz) {\r\n  ...\r\n\r\n  NanReturnThis();\r\n}\r\n```\r\n\r\n<a name=\"api_nan_return_holder\"></a>\r\n### NanReturnHolder()\r\n\r\nUse `NanReturnHolder` when you want to return `Holder` from your V8 accessible method:\r\n\r\n```c++\r\nNAN_METHOD(Foo::Baz) {\r\n  ...\r\n\r\n  NanReturnHolder();\r\n}\r\n```\r\n\r\n<a name=\"api_nan_scope\"></a>\r\n### NanScope()\r\n\r\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope` when you do not wish to return handles (`Handle` or `Local`) to the surrounding scope (or in functions directly exposed to V8, as they do not return values in the normal sense):\r\n\r\n```c++\r\nNAN_METHOD(Foo::Bar) {\r\n  NanScope();\r\n\r\n  NanReturnValue(NanNew<String>(\"FooBar!\"));\r\n}\r\n```\r\n\r\nThis method is not directly exposed to V8, nor does it return a handle, so it uses an unescapable scope:\r\n\r\n```c++\r\nbool Foo::Bar() {\r\n  NanScope();\r\n\r\n  Local<Boolean> val = NanFalse();\r\n  ...\r\n  return val->Value();\r\n}\r\n```\r\n\r\n<a name=\"api_nan_escapable_scope\"></a>\r\n### NanEscapableScope()\r\n\r\nThe separation of handle scopes into escapable and inescapable scopes makes `NanEscapableScope()` necessary, use it in place of `HandleScope scope` when you later wish to return a handle (`Handle` or `Local`) from the scope, this is for internal functions not directly exposed to V8:\r\n\r\n```c++\r\nHandle<String> Foo::Bar() {\r\n  NanEscapableScope();\r\n\r\n  return NanEscapeScope(NanNew<String>(\"FooBar!\"));\r\n}\r\n```\r\n\r\n<a name=\"api_nan_escape_scope\"></a>\r\n### Local&lt;T&gt; NanEscapeScope(Handle&lt;T&gt; value);\r\nUse together with `NanEscapableScope` to escape the scope. Corresponds to `HandleScope::Close` or `EscapableHandleScope::Escape`.\r\n\r\n<a name=\"api_nan_locker\"></a>\r\n### NanLocker()\r\n\r\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\r\n\r\n```c++\r\nNAN_METHOD(Foo::Bar) {\r\n  NanLocker();\r\n  ...\r\n  NanUnlocker();\r\n}\r\n```\r\n\r\n<a name=\"api_nan_unlocker\"></a>\r\n### NanUnlocker()\r\n\r\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\r\n\r\n```c++\r\nNAN_METHOD(Foo::Bar) {\r\n  NanLocker();\r\n  ...\r\n  NanUnlocker();\r\n}\r\n```\r\n\r\n<a name=\"api_nan_get_internal_field_pointer\"></a>\r\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\r\n\r\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\r\n\r\n```c++\r\nLocal<Object> obj;\r\n...\r\nNanGetInternalFieldPointer(obj, 0);\r\n```\r\n<a name=\"api_nan_set_internal_field_pointer\"></a>\r\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\r\n\r\nSets the value of the internal field at `index` on a V8 `Object` handle.\r\n\r\n```c++\r\nstatic Persistent<Function> dataWrapperCtor;\r\n...\r\nLocal<Object> wrapper = NanNew(dataWrapperCtor)->NewInstance();\r\nNanSetInternalFieldPointer(wrapper, 0, this);\r\n```\r\n\r\n<a name=\"api_nan_object_wrap_handle\"></a>\r\n### Local&lt;Object&gt; NanObjectWrapHandle(Object)\r\n\r\nWhen you want to fetch the V8 object handle from a native object you've wrapped with Node's `ObjectWrap`, you should use `NanObjectWrapHandle`:\r\n\r\n```c++\r\nNanObjectWrapHandle(iterator)->Get(NanNew<String>(\"end\"))\r\n```\r\n\r\n<a name=\"api_nan_symbol\"></a>\r\n### ~~Local&lt;String&gt; NanSymbol(const char *)~~\r\n\r\nDeprecated. Use `NanNew<String>` instead.\r\n~~Use to create string symbol objects (i.e. `v8::String::NewSymbol(x)`), for getting and setting object properties, or names of objects.~~\r\n\r\n```c++\r\nbool foo = false;\r\nif (obj->Has(NanNew<String>(\"foo\")))\r\n  foo = optionsObj->Get(NanNew<String>(\"foo\"))->BooleanValue()\r\n```\r\n\r\n<a name=\"api_nan_get_pointer_safe\"></a>\r\n### Type NanGetPointerSafe(Type *[, Type])\r\n\r\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\r\n\r\n```c++\r\nchar *plugh(uint32_t *optional) {\r\n  char res[] = \"xyzzy\";\r\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\r\n  switch (param) {\r\n    ...\r\n  }\r\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\r\n}  \r\n```\r\n\r\n<a name=\"api_nan_set_pointer_safe\"></a>\r\n### bool NanSetPointerSafe(Type *, Type)\r\n\r\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply returns `false`.  Otherwise, the value is assigned to the variable the pointer points to.\r\n\r\n```c++\r\nconst char *plugh(size_t *outputsize) {\r\n  char res[] = \"xyzzy\";\r\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\r\n    ...\r\n  }\r\n\r\n  ...\r\n}\r\n```\r\n\r\n<a name=\"api_nan_raw_string\"></a>\r\n### ~~void* NanRawString(Handle&lt;Value&gt;, enum Nan::Encoding, size_t *, void *, size_t, int)~~\r\n\r\nDeprecated. Use something else.\r\n\r\n~~When you want to convert a V8 `String` to a `char*` buffer, use `NanRawString`. You have to supply an encoding as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows setting `String::WriteOptions`.\r\nJust remember that you'll end up with an object that you'll need to `delete[]` at some point unless you supply your own buffer:~~\r\n\r\n```c++\r\nsize_t count;\r\nvoid* decoded = NanRawString(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\r\n...\r\ndelete[] reinterpret_cast<char*>(decoded);\r\n```\r\n\r\n<a name=\"api_nan_c_string\"></a>\r\n### ~~char* NanCString(Handle&lt;Value&gt;, size_t *[, char *, size_t, int])~~\r\n\r\nDeprecated. Use `String::Utf8Value` or `NanUtf8String` instead.\r\n\r\n~~When you want to convert a V8 `String` to a null-terminated C `char*` use `NanCString`. The resulting `char*` will be UTF-8-encoded, and you need to supply a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `v8::String::NO_OPTIONS`.\r\nJust remember that you'll end up with an object that you'll need to `delete[]` at some point unless you supply your own buffer:~~\r\n\r\n```c++\r\nsize_t count;\r\nchar* name = NanCString(args[0], &count);\r\n...\r\ndelete[] name;\r\n```\r\n\r\n<a name=\"api_nan_ascii_string\"></a>\r\n### NanAsciiString\r\n\r\nContrary to the name, this is not actually an ASCII string, it is a one-byte string with no particular encoding. Do not use unless you actually need this incorrect legacy behavior. Consider fixing your broken code instead. If you actually have a proper ASCII-string, use UTF-8, which is a proper superset of ASCII.\r\nConvert a `String` to zero-terminated, sort-of Ascii-encoded `char *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\r\n\r\n```c++\r\nNAN_METHOD(foo) {\r\n  NanScope();\r\n  NanReturnValue(NanNew(*NanAsciiString(arg[0])));\r\n}\r\n```\r\n\r\n####*WRONG*:\r\nthe buffer `str` points to has been freed when `baz` was destroyed:\r\n```c++\r\nstatic char *str;\r\n\r\nNAN_METHOD(bar) {\r\n  NanScope();\r\n  NanAsciiString baz(arg[0]);\r\n\r\n  str = *baz;\r\n  NanReturnUndefined(); // baz goes out of scope, freeing str\r\n}\r\n\r\n...\r\n\r\nprintf(str); // use-after-free error\r\n```\r\n\r\n####*RIGHT*:\r\n```c++\r\nstatic NanAsciiString *str;\r\n\r\nNAN_METHOD(bar) {\r\n  NanScope();\r\n  str = new NanAsciiString(arg[0]);\r\n  NanReturnUndefined();\r\n}\r\n\r\n...\r\n\r\nprintf(**str);\r\n```\r\n\r\n<a name=\"api_nan_utf8_string\"></a>\r\n### NanUtf8String\r\n\r\nEquivalent to `String::Utf8Value`, it only exists for the sake of completeness.\r\nConvert a `String` to zero-terminated, Utf8-encoded `char *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\r\n\r\n```c++\r\nNAN_METHOD(foo) {\r\n  NanScope();\r\n  NanReturnValue(NanNew(*NanUtf8String(arg[0])));\r\n}\r\n```\r\n\r\n####*WRONG*:\r\nthe buffer `str` points to has been freed when `baz` was destroyed:\r\n```c++\r\nstatic char *str;\r\n\r\nNAN_METHOD(bar) {\r\n  NanScope();\r\n  NanUtf8String baz(arg[0]);\r\n\r\n  str = *baz;\r\n  NanReturnUndefined(); // baz goes out of scope, freeing str\r\n}\r\n\r\n...\r\n\r\nprintf(str); // use-after-free error\r\n```\r\n\r\n####*RIGHT*:\r\n```c++\r\nstatic NanUtf8String *str;\r\n\r\nNAN_METHOD(bar) {\r\n  NanScope();\r\n  str = new NanUtf8String(arg[0]);\r\n  NanReturnUndefined();\r\n}\r\n\r\n...\r\n\r\nprintf(**str);\r\n```\r\n\r\n\r\n<a name=\"api_nan_ucs2_string\"></a>\r\n### NanUcs2String\r\n\r\nEquivalent to `String::Value`, it only exists for the sake of completeness.\r\nConvert a `String` to zero-terminated, Ucs2-encoded `uint16_t *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\r\n\r\n```c++\r\nNAN_METHOD(foo) {\r\n  NanScope();\r\n  NanReturnValue(NanNew(*NanUcs2String(arg[0])));\r\n}\r\n```\r\n\r\n####*WRONG*:\r\nthe buffer `str` points to has been freed when `baz` was destroyed:\r\n```c++\r\nstatic char *str;\r\n\r\nNAN_METHOD(bar) {\r\n  NanScope();\r\n  NanUcs2String baz(arg[0]);\r\n\r\n  str = *baz;\r\n  NanReturnUndefined(); // baz goes out of scope, freeing str\r\n}\r\n\r\n...\r\n\r\nprintf(str); // use-after-free error\r\n```\r\n\r\n####*RIGHT*:\r\n```c++\r\nstatic NanUcs2String *str;\r\n\r\nNAN_METHOD(bar) {\r\n  NanScope();\r\n  str = new NanUcs2String(arg[0]);\r\n  NanReturnUndefined();\r\n}\r\n\r\n...\r\n\r\nprintf(**str);\r\n```\r\n\r\n<a name=\"api_nan_boolean_option_value\"></a>\r\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\r\n\r\nWhen you have an \"options\" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\r\n\r\nThe optional last parameter is the *default* value, which is `false` if left off:\r\n\r\n```c++\r\n// `foo` is false unless the user supplies a truthy value for it\r\nbool foo = NanBooleanOptionValue(optionsObj, NanNew<String>(\"foo\"));\r\n// `bar` is true unless the user supplies a falsy value for it\r\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanNew<String>(\"bar\"), true);\r\n```\r\n\r\n<a name=\"api_nan_uint32_option_value\"></a>\r\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\r\n\r\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\r\n\r\nRequires all 3 arguments as a default is not optional:\r\n\r\n```c++\r\nuint32_t count = NanUInt32OptionValue(optionsObj, NanNew<String>(\"count\"), 1024);\r\n```\r\n\r\n<a name=\"api_nan_error\"></a>\r\n### NanError(message), NanTypeError(message), NanRangeError(message)\r\n\r\nFor making `Error`, `TypeError` and `RangeError` objects.\r\n\r\n```c++\r\nLocal<Value> res = NanError(\"you must supply a callback argument\");\r\n```\r\n\r\n<a name=\"api_nan_throw_error\"></a>\r\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\r\n\r\nFor throwing `Error`, `TypeError` and `RangeError` objects.\r\n\r\n```c++\r\nNanThrowError(\"you must supply a callback argument\");\r\n```\r\n\r\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\r\n\r\n<a name=\"api_nan_new_buffer_handle\"></a>\r\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\r\n\r\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\r\n\r\n```c++\r\nNanNewBufferHandle((char*)value.data(), value.size());\r\n```\r\n\r\nCan also be used to initialize a `Buffer` with just a `size` argument.\r\n\r\nCan also be supplied with a `NanFreeCallback` and a hint for the garbage collector.\r\n\r\n<a name=\"api_nan_buffer_use\"></a>\r\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\r\n\r\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\r\nWhile it was possible to get around this, it required a shim by passing a\r\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\r\nneeding to use this shim.\r\n\r\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\r\nmemory automatically when the weak callback is called. Keep this in mind, as\r\ncareless use can lead to \"double free or corruption\" and other cryptic failures.\r\n\r\n<a name=\"api_nan_has_instance\"></a>\r\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\r\n\r\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\r\n\r\n<a name=\"api_nan_new_context_handle\"></a>\r\n### ~~Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])\r\n\r\nDeprecated. Use `NanNew<Context>` instead.\r\n\r\n~~Creates a new `Local<Context>` handle.\r\n\r\n```c++\r\nLocal<FunctionTemplate> ftmpl = NanNew<FunctionTemplate>();\r\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\r\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\r\n```\r\n\r\n<a name=\"api_nan_get_current_context\"></a>\r\n### Local&lt;Context&gt; NanGetCurrentContext()\r\n\r\nGets the current context.\r\n\r\n```c++\r\nLocal<Context> ctx = NanGetCurrentContext();\r\n```\r\n\r\n<a name=\"api_nan_dispose_persistent\"></a>\r\n### void NanDisposePersistent(Persistent&lt;T&gt; &)\r\n\r\nUse `NanDisposePersistent` to dispose a `Persistent` handle.\r\n\r\n```c++\r\nNanDisposePersistent(persistentHandle);\r\n```\r\n\r\n<a name=\"api_nan_assign_persistent\"></a>\r\n### NanAssignPersistent(handle, object)\r\n\r\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\r\n\r\nIn general it is now better to place anything you want to protect from V8's garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\r\n\r\n```c++\r\nPersistent<Object> persistentHandle;\r\n\r\n...\r\n\r\nLocal<Object> obj = NanNew<Object>();\r\nobj->Set(NanNew<String>(\"key\"), keyHandle); // where keyHandle might be a Local<String>\r\nNanAssignPersistent(persistentHandle, obj)\r\n```\r\n\r\n<a name=\"api_nan_make_weak_persistent\"></a>\r\n### _NanWeakCallbackInfo&lt;T, P&gt;* NanMakeWeakPersistent(Handle&lt;T&gt;, P*, _NanWeakCallbackInfo&lt;T, P&gt;::Callback)\r\n\r\nCreates a weak persistent handle with the supplied parameter and `NAN_WEAK_CALLBACK`.\r\n\r\n```c++\r\nNAN_WEAK_CALLBACK(weakCallback) {\r\n\r\n...\r\n\r\n}\r\n\r\nLocal<Function> func;\r\n\r\n...\r\n\r\nint *parameter = new int(0);\r\nNanMakeWeakPersistent(func, parameter, &weakCallback);\r\n```\r\n\r\n<a name=\"api_nan_set_template\"></a>\r\n### NanSetTemplate(templ, name, value [, attributes])\r\n\r\nUse to add properties on object and function templates.\r\n\r\n<a name=\"api_nan_set_prototype_template\"></a>\r\n### NanSetPrototypeTemplate(templ, name, value [, attributes])\r\n\r\nUse to add prototype properties on function templates.\r\n\r\n<a name=\"api_nan_set_instance_template\"></a>\r\n### NanSetInstanceTemplate(templ, name, value [, attributes])\r\n\r\nUse to add instance properties on function templates.\r\n\r\n<a name=\"api_nan_make_callback\"></a>\r\n### NanMakeCallback(target, func, argc, argv)\r\n\r\nUse instead of `node::MakeCallback` to call javascript functions. This (or `NanCallback`) is the only proper way of calling functions. You must _*never, ever*_ directly use `Function::Call`, it will lead to run-time failures.\r\n\r\n<a name=\"api_nan_encode\"></a>\r\n### NanEncode(const void*, size_t[, enum Nan::Encoding])\r\n\r\nReplaces `node::Encode`.\r\n\r\n<a name=\"api_nan_decode_bytes\"></a>\r\n### NanDecodeBytes(v8::Handle&lt;v8::Value&gt;[, enum Nan::Encoding])\r\n\r\nReplaces `node::DecodeBytes`.\r\n\r\n<a name=\"api_nan_decode_write\"></a>\r\n### NanDecodeWrite(char *, size_t, v8::Handle&lt;v8::Value&gt;[, enum Nan::Encoding])\r\n\r\nReplaces `node::DecodeWrite`.\r\n\r\n<a name=\"api_nan_compile_script\"></a>\r\n### NanCompileScript(Handle<String> s [, const ScriptOrigin&amp; origin])\r\n\r\nUse to create new scripts bound to the current context.\r\n\r\n<a name=\"api_nan_run_script\"></a>\r\n### NanRunScript(script)\r\n\r\nUse to run both bound and unbound scripts.\r\n\r\n<a name=\"api_nan_adjust_external_memory\"></a>\r\n### NanAdjustExternalMemory(int change_in_bytes)\r\n\r\nSimply does `AdjustAmountOfExternalAllocatedMemory`, note that the argument and returned value have type `int`.\r\n\r\n<a name=\"api_nan_add_gc_epilogue_callback\"></a>\r\n### NanAddGCEpilogueCallback(GCEpilogueCallback callback, GCType gc_type_filter=kGCTypeAll)\r\n\r\nSimply does `AddGCEpilogueCallback`\r\n\r\n<a name=\"api_nan_add_gc_prologue_callback\"></a>\r\n### NanAddGCPrologueCallback(GCPrologueCallback callback, GCType gc_type_filter=kGCTypeAll)\r\n\r\nSimply does `AddGCPrologueCallback`\r\n\r\n<a name=\"api_nan_remove_gc_epilogue_callback\"></a>\r\n### NanRemoveGCEpilogueCallback(GCEpilogueCallback callback)\r\n\r\nSimply does `RemoveGCEpilogueCallback`\r\n\r\n<a name=\"api_nan_remove_gc_prologue_callback\"></a>\r\n### NanRemoveGCPrologueCallback(GCPrologueCallback callback)\r\n\r\nSimply does `RemoveGCPrologueCallback`\r\n\r\n<a name=\"api_nan_get_heap_statistics\"></a>\r\n### NanGetHeapStatistics(HeapStatistics *heap_statistics)\r\n\r\nSimply does `GetHeapStatistics`\r\n\r\n<a name=\"api_nan_set_counter_function\"></a>\r\n### NanSetCounterFunction(CounterLookupCallback cb)\r\n\r\nSimply does `SetCounterFunction`\r\n\r\n<a name=\"api_nan_set_create_histogram_function\"></a>\r\n### NanSetCreateHistogramFunction(CreateHistogramCallback cb)\r\n\r\nSimply does `SetCreateHistogramFunction`\r\n\r\n<a name=\"api_nan_set_add_histogram_sample_function\"></a>\r\n### NanSetAddHistogramSampleFunction(AddHistogramSampleCallback cb)\r\n\r\nSimply does `SetAddHistogramSampleFunction`\r\n\r\n<a name=\"api_nan_idle_notification\"></a>\r\n### NanIdleNotification(int idle_time_in_ms)\r\n\r\nSimply does `IdleNotification`\r\n\r\n<a name=\"api_nan_low_memory_notification\"></a>\r\n### NanLowMemoryNotification()\r\n\r\nSimply does `LowMemoryNotification`\r\n\r\n<a name=\"api_nan_context_disposed_notification\"></a>\r\n### NanContextDisposedNotification()\r\n\r\nSimply does `ContextDisposedNotification`\r\n\r\n<a name=\"api_nan_callback\"></a>\r\n### NanCallback\r\n\r\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Handle<Function>` is annoyingly tricky. `NanCallback` makes it easier by taking your handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\r\n\r\n```c++\r\nLocal<Function> callbackHandle = args[0].As<Function>();\r\nNanCallback *callback = new NanCallback(callbackHandle);\r\n// pass `callback` around and it's safe from GC until you:\r\ndelete callback;\r\n```\r\n\r\nYou can execute the callback like so:\r\n\r\n```c++\r\n// no arguments:\r\ncallback->Call(0, NULL);\r\n\r\n// an error argument:\r\nHandle<Value> argv[] = {\r\n  NanError(NanNew<String>(\"fail!\"))\r\n};\r\ncallback->Call(1, argv);\r\n\r\n// a success argument:\r\nHandle<Value> argv[] = {\r\n  NanNull(),\r\n  NanNew<String>(\"w00t!\")\r\n};\r\ncallback->Call(2, argv);\r\n```\r\n\r\n`NanCallback` also has a `Local<Function> GetFunction()` method that you can use\r\nto fetch a local handle to the underlying callback function, as well  as a\r\n`void SetFunction(Handle<Function>)` for setting the callback on the\r\n`NanCallback`. You can check if a `NanCallback` is empty with the `bool IsEmpty()` method. Additionally a generic constructor is available for using\r\n`NanCallback` without performing heap allocations.\r\n\r\n<a name=\"api_nan_async_worker\"></a>\r\n### NanAsyncWorker\r\n\r\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\r\n\r\nSee a rough outline of the implementation:\r\n\r\n```c++\r\nclass NanAsyncWorker {\r\npublic:\r\n  NanAsyncWorker (NanCallback *callback);\r\n\r\n  // Clean up persistent handles and delete the *callback\r\n  virtual ~NanAsyncWorker ();\r\n\r\n  // Check the `ErrorMessage()` and call HandleOKCallback()\r\n  // or HandleErrorCallback depending on whether it has been set or not\r\n  virtual void WorkComplete ();\r\n\r\n  // You must implement this to do some async work. If there is an\r\n  // error then use `SetErrorMessage()` to set an error message and the callback will\r\n  // be passed that string in an Error object\r\n  virtual void Execute ();\r\n\r\n  // Save a V8 object in a Persistent handle to protect it from GC\r\n  void SaveToPersistent(const char *key, Local<Object> &obj);\r\n\r\n  // Fetch a stored V8 object (don't call from within `Execute()`)\r\n  Local<Object> GetFromPersistent(const char *key);\r\n\r\n  // Get the error message (or NULL)\r\n  const char *ErrorMessage();\r\n\r\n  // Set an error message\r\n  void SetErrorMessage(const char *msg);\r\n\r\nprotected:\r\n  // Default implementation calls the callback function with no arguments.\r\n  // Override this to return meaningful data\r\n  virtual void HandleOKCallback ();\r\n\r\n  // Default implementation calls the callback function with an Error object\r\n  // wrapping the `errmsg` string\r\n  virtual void HandleErrorCallback ();\r\n};\r\n```\r\n\r\n<a name=\"api_nan_async_queue_worker\"></a>\r\n### NanAsyncQueueWorker(NanAsyncWorker *)\r\n\r\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\r\n\r\n<a name=\"api\"></a>\r\n### Tests\r\n\r\nTo run the NAN tests do:\r\n\r\n``` sh\r\nnpm install\r\nnpm run-script rebuild-tests\r\nnpm test\r\n```\r\n\r\nOr just:\r\n\r\n``` sh\r\nnpm install\r\nmake test\r\n```\r\n\r\n### Contributors\r\n\r\nNAN is only possible due to the excellent work of the following contributors:\r\n\r\n<table><tbody>\r\n<tr><th align=\"left\">Rod Vagg</th><td><a href=\"https://github.com/rvagg\">GitHub/rvagg</a></td><td><a href=\"http://twitter.com/rvagg\">Twitter/@rvagg</a></td></tr>\r\n<tr><th align=\"left\">Benjamin Byholm</th><td><a href=\"https://github.com/kkoopa/\">GitHub/kkoopa</a></td><td>-</td></tr>\r\n<tr><th align=\"left\">Trevor Norris</th><td><a href=\"https://github.com/trevnorris\">GitHub/trevnorris</a></td><td><a href=\"http://twitter.com/trevnorris\">Twitter/@trevnorris</a></td></tr>\r\n<tr><th align=\"left\">Nathan Rajlich</th><td><a href=\"https://github.com/TooTallNate\">GitHub/TooTallNate</a></td><td><a href=\"http://twitter.com/TooTallNate\">Twitter/@TooTallNate</a></td></tr>\r\n<tr><th align=\"left\">Brett Lawson</th><td><a href=\"https://github.com/brett19\">GitHub/brett19</a></td><td><a href=\"http://twitter.com/brett19x\">Twitter/@brett19x</a></td></tr>\r\n<tr><th align=\"left\">Ben Noordhuis</th><td><a href=\"https://github.com/bnoordhuis\">GitHub/bnoordhuis</a></td><td><a href=\"http://twitter.com/bnoordhuis\">Twitter/@bnoordhuis</a></td></tr>\r\n<tr><th align=\"left\">David Siegel</th><td><a href=\"https://github.com/agnat\">GitHub/agnat</a></td><td>-</td></tr>\r\n</tbody></table>\r\n\r\nLicence &amp; copyright\r\n-----------------------\r\n\r\nCopyright (c) 2015 NAN contributors (listed above).\r\n\r\nNative Abstractions for Node.js is licensed under an MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rvagg/nan/issues"
  },
  "homepage": "https://github.com/rvagg/nan",
  "_id": "nan@1.6.2",
  "_shasum": "1e05d2a0d56ba14310841a6bdfc2e1661220f3c9",
  "_resolved": "git+https://github.com/rvagg/nan#8d54da7ff013d9aebe2b18f04cbc69f3f018f3c6",
  "_from": "nan@git+https://github.com/rvagg/nan#8d54da7ff013d9aebe2b18f04cbc69f3f018f3c6"
}
